# Written by: Christopher Gholmieh
# Imports:

# Cryptography:
from cryptography.hazmat.primitives.ciphers.aead import AESGCM

# Arguments:
from argparse import ArgumentParser

# Loguru:
from loguru import logger

# OS:
import os


# Constants:
NONCE_SIZE: int = 12
KEY_SIZE: int = 32


# Functions:
def generate_encryption_key() -> bytes:
    return AESGCM.generate_key(bit_length=256)

def embed_bytes_into_array(byte_data: bytes, name: str) -> str:
    # Variables (Assignment):
    # HEX:
    hex_bytes = ", ".join(f"0x{byte:02x}" for byte in byte_data)

    # Logic:
    return f"unsigned char {name}[] = {{ {hex_bytes} }};\nunsigned int {name}_length = {len(byte_data)};\n"

def encrypt_configuration(
    yaml_path: str, output_path: str, header_path: str, source_path: str
) -> None:
    with open(yaml_path, "rb") as yaml_file:
        text: bytes = yaml_file.read()

    # Variables (Assignment):
    # Key:
    encryption_key: bytes = generate_encryption_key()

    logger.info(f"[+] AES Key (HEX): {encryption_key.hex()}")

    # Nonce:
    nonce = os.urandom(NONCE_SIZE)

    logger.info(f"[+] Nonce (HEX): {nonce.hex()}")

    # AESGCM:
    aesgcm: AESGCM = AESGCM(encryption_key)

    # Cipher:
    cipher_text: bytes = aesgcm.encrypt(nonce, text, associated_data=None)

    # Logic:
    with open(output_path, "wb") as output_file:
        output_file.write(nonce + cipher_text)

    with open(header_path, "w") as header_file:
        header_file.writelines([
            "// Autogenerated by: configuration-parser.py\n",
            "// Guards:\n",
            "#ifndef __CRYPTOGRAPHY_CONSTANTS_HPP__\n",
            "#define __CRYPTOGRAPHY_CONSTANTS_HPP__\n\n\n",

            "// Constants:\n",
            "extern unsigned char AES_ENCRYPTION_KEY[32];\n",
            "extern unsigned int AES_ENCRYPTION_KEY_length;\n\n",

            "extern unsigned char NONCE[12];\n"
            "extern unsigned int NONCE_length;\n\n"

            "// Guard:\n",
            "#endif /** __CRYPTOGRAPHY_CONSTANTS_HPP__ */",
        ])

    with open(source_path, "w") as source_file:
        source_file.writelines([
            "// Autogenerated by: configuration-parser.py\n",
            "// Headers:\n\n",

            "// Implementations:\n",
            f"#include \"{header_path.removeprefix("./include/")}\"\n\n",

            "// Constants:\n",
            f"{embed_bytes_into_array(encryption_key, "AES_ENCRYPTION_KEY")}\n",
            f"{embed_bytes_into_array(nonce, "NONCE")}",
        ])

    logger.info(f"[+] Encrypted configuration written to {output_path}!")

def main() -> None:
    # Variables (Assignment):
    # Parser:
    parser: ArgumentParser = ArgumentParser(prog="configuration-parser.py")

    parser.add_argument("configuration_file")

    # Arguments:
    arguments = parser.parse_args()

    # Logic:
    encrypt_configuration(arguments.configuration_file, "configuration.dat", "./include/cryptography-constants.hpp", "./source/cryptography-constants.cpp")

# Main:
if __name__ == "__main__":
    main()