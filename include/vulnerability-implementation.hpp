// Written by: Christopher Gholmieh
// Guards:
#ifndef __VULNERABILITY_IMPLEMENTATION_H__
#define __VULNERABILITY_IMPLEMENTATION_H__

// Headers:
// Core:
#include <string>


// Vulnerability:
class Vulnerability {
    public:
        /* Constructor: */
        Vulnerability(const int points, const std::string &description) : points(points), description(description) {}

		/* Destructor: */
		virtual ~Vulnerability() = default;

        /* Evaluate: */
        virtual void evaluate() {}

        /* Description: */
        std::string get_description() const {
            return this->description;
        }

        /* Remediated: */
        bool get_remediated() const {
            return this->remediated;
        }

        /* Points: */
        int get_points() const {
            return this->points;
        }

    protected:
        /* Remediated: */
        bool remediated = false;

        /* Penalized: */
        bool penalized = false;

        /* Points: */
        int points;

        /* Description: */
        const std::string description;
};

// Guard:
#endif /** __VULNERABILITY_IMPLEMENTATION_H__ */
